// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: channelconfig/v2/service.proto

package channelconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChannelConfigService_GetChannelConfig_FullMethodName       = "/channelconfig.v2.ChannelConfigService/GetChannelConfig"
	ChannelConfigService_SetDailyScrumConfig_FullMethodName    = "/channelconfig.v2.ChannelConfigService/SetDailyScrumConfig"
	ChannelConfigService_GetDailyScrumConfig_FullMethodName    = "/channelconfig.v2.ChannelConfigService/GetDailyScrumConfig"
	ChannelConfigService_SetWeeklyReportConfig_FullMethodName  = "/channelconfig.v2.ChannelConfigService/SetWeeklyReportConfig"
	ChannelConfigService_GetWeeklyReportConfig_FullMethodName  = "/channelconfig.v2.ChannelConfigService/GetWeeklyReportConfig"
	ChannelConfigService_AddScrumMessageHistory_FullMethodName = "/channelconfig.v2.ChannelConfigService/AddScrumMessageHistory"
	ChannelConfigService_GetScrumMessageHistory_FullMethodName = "/channelconfig.v2.ChannelConfigService/GetScrumMessageHistory"
)

// ChannelConfigServiceClient is the client API for ChannelConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelConfigServiceClient interface {
	GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*GetChannelConfigResponse, error)
	SetDailyScrumConfig(ctx context.Context, in *SetDailyScrumConfigRequest, opts ...grpc.CallOption) (*SetDailyScrumConfigResponse, error)
	GetDailyScrumConfig(ctx context.Context, in *GetDailyScrumConfigRequest, opts ...grpc.CallOption) (*GetDailyScrumConfigResponse, error)
	SetWeeklyReportConfig(ctx context.Context, in *SetWeeklyReportConfigRequest, opts ...grpc.CallOption) (*SetWeeklyReportConfigResponse, error)
	GetWeeklyReportConfig(ctx context.Context, in *GetWeeklyReportConfigRequest, opts ...grpc.CallOption) (*GetWeeklyReportConfigResponse, error)
	AddScrumMessageHistory(ctx context.Context, in *AddScrumMessageHistoryRequest, opts ...grpc.CallOption) (*AddScrumMessageHistoryResponse, error)
	GetScrumMessageHistory(ctx context.Context, in *GetScrumMessageHistoryRequest, opts ...grpc.CallOption) (*GetScrumMessageHistoryResponse, error)
}

type channelConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelConfigServiceClient(cc grpc.ClientConnInterface) ChannelConfigServiceClient {
	return &channelConfigServiceClient{cc}
}

func (c *channelConfigServiceClient) GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*GetChannelConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelConfigResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_GetChannelConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) SetDailyScrumConfig(ctx context.Context, in *SetDailyScrumConfigRequest, opts ...grpc.CallOption) (*SetDailyScrumConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDailyScrumConfigResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_SetDailyScrumConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) GetDailyScrumConfig(ctx context.Context, in *GetDailyScrumConfigRequest, opts ...grpc.CallOption) (*GetDailyScrumConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyScrumConfigResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_GetDailyScrumConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) SetWeeklyReportConfig(ctx context.Context, in *SetWeeklyReportConfigRequest, opts ...grpc.CallOption) (*SetWeeklyReportConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetWeeklyReportConfigResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_SetWeeklyReportConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) GetWeeklyReportConfig(ctx context.Context, in *GetWeeklyReportConfigRequest, opts ...grpc.CallOption) (*GetWeeklyReportConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWeeklyReportConfigResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_GetWeeklyReportConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) AddScrumMessageHistory(ctx context.Context, in *AddScrumMessageHistoryRequest, opts ...grpc.CallOption) (*AddScrumMessageHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddScrumMessageHistoryResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_AddScrumMessageHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) GetScrumMessageHistory(ctx context.Context, in *GetScrumMessageHistoryRequest, opts ...grpc.CallOption) (*GetScrumMessageHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScrumMessageHistoryResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_GetScrumMessageHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelConfigServiceServer is the server API for ChannelConfigService service.
// All implementations must embed UnimplementedChannelConfigServiceServer
// for forward compatibility.
type ChannelConfigServiceServer interface {
	GetChannelConfig(context.Context, *GetChannelConfigRequest) (*GetChannelConfigResponse, error)
	SetDailyScrumConfig(context.Context, *SetDailyScrumConfigRequest) (*SetDailyScrumConfigResponse, error)
	GetDailyScrumConfig(context.Context, *GetDailyScrumConfigRequest) (*GetDailyScrumConfigResponse, error)
	SetWeeklyReportConfig(context.Context, *SetWeeklyReportConfigRequest) (*SetWeeklyReportConfigResponse, error)
	GetWeeklyReportConfig(context.Context, *GetWeeklyReportConfigRequest) (*GetWeeklyReportConfigResponse, error)
	AddScrumMessageHistory(context.Context, *AddScrumMessageHistoryRequest) (*AddScrumMessageHistoryResponse, error)
	GetScrumMessageHistory(context.Context, *GetScrumMessageHistoryRequest) (*GetScrumMessageHistoryResponse, error)
	mustEmbedUnimplementedChannelConfigServiceServer()
}

// UnimplementedChannelConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChannelConfigServiceServer struct{}

func (UnimplementedChannelConfigServiceServer) GetChannelConfig(context.Context, *GetChannelConfigRequest) (*GetChannelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelConfig not implemented")
}
func (UnimplementedChannelConfigServiceServer) SetDailyScrumConfig(context.Context, *SetDailyScrumConfigRequest) (*SetDailyScrumConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDailyScrumConfig not implemented")
}
func (UnimplementedChannelConfigServiceServer) GetDailyScrumConfig(context.Context, *GetDailyScrumConfigRequest) (*GetDailyScrumConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyScrumConfig not implemented")
}
func (UnimplementedChannelConfigServiceServer) SetWeeklyReportConfig(context.Context, *SetWeeklyReportConfigRequest) (*SetWeeklyReportConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWeeklyReportConfig not implemented")
}
func (UnimplementedChannelConfigServiceServer) GetWeeklyReportConfig(context.Context, *GetWeeklyReportConfigRequest) (*GetWeeklyReportConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyReportConfig not implemented")
}
func (UnimplementedChannelConfigServiceServer) AddScrumMessageHistory(context.Context, *AddScrumMessageHistoryRequest) (*AddScrumMessageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScrumMessageHistory not implemented")
}
func (UnimplementedChannelConfigServiceServer) GetScrumMessageHistory(context.Context, *GetScrumMessageHistoryRequest) (*GetScrumMessageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrumMessageHistory not implemented")
}
func (UnimplementedChannelConfigServiceServer) mustEmbedUnimplementedChannelConfigServiceServer() {}
func (UnimplementedChannelConfigServiceServer) testEmbeddedByValue()                              {}

// UnsafeChannelConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelConfigServiceServer will
// result in compilation errors.
type UnsafeChannelConfigServiceServer interface {
	mustEmbedUnimplementedChannelConfigServiceServer()
}

func RegisterChannelConfigServiceServer(s grpc.ServiceRegistrar, srv ChannelConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedChannelConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChannelConfigService_ServiceDesc, srv)
}

func _ChannelConfigService_GetChannelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).GetChannelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_GetChannelConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).GetChannelConfig(ctx, req.(*GetChannelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_SetDailyScrumConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDailyScrumConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).SetDailyScrumConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_SetDailyScrumConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).SetDailyScrumConfig(ctx, req.(*SetDailyScrumConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_GetDailyScrumConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyScrumConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).GetDailyScrumConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_GetDailyScrumConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).GetDailyScrumConfig(ctx, req.(*GetDailyScrumConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_SetWeeklyReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWeeklyReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).SetWeeklyReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_SetWeeklyReportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).SetWeeklyReportConfig(ctx, req.(*SetWeeklyReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_GetWeeklyReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).GetWeeklyReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_GetWeeklyReportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).GetWeeklyReportConfig(ctx, req.(*GetWeeklyReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_AddScrumMessageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScrumMessageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).AddScrumMessageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_AddScrumMessageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).AddScrumMessageHistory(ctx, req.(*AddScrumMessageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_GetScrumMessageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrumMessageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).GetScrumMessageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_GetScrumMessageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).GetScrumMessageHistory(ctx, req.(*GetScrumMessageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelConfigService_ServiceDesc is the grpc.ServiceDesc for ChannelConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channelconfig.v2.ChannelConfigService",
	HandlerType: (*ChannelConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelConfig",
			Handler:    _ChannelConfigService_GetChannelConfig_Handler,
		},
		{
			MethodName: "SetDailyScrumConfig",
			Handler:    _ChannelConfigService_SetDailyScrumConfig_Handler,
		},
		{
			MethodName: "GetDailyScrumConfig",
			Handler:    _ChannelConfigService_GetDailyScrumConfig_Handler,
		},
		{
			MethodName: "SetWeeklyReportConfig",
			Handler:    _ChannelConfigService_SetWeeklyReportConfig_Handler,
		},
		{
			MethodName: "GetWeeklyReportConfig",
			Handler:    _ChannelConfigService_GetWeeklyReportConfig_Handler,
		},
		{
			MethodName: "AddScrumMessageHistory",
			Handler:    _ChannelConfigService_AddScrumMessageHistory_Handler,
		},
		{
			MethodName: "GetScrumMessageHistory",
			Handler:    _ChannelConfigService_GetScrumMessageHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channelconfig/v2/service.proto",
}
