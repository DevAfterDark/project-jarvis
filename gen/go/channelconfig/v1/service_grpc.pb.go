// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: channelconfig/v1/service.proto

package channelconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChannelConfigService_Subscribe_FullMethodName             = "/channelconfig.v1.ChannelConfigService/Subscribe"
	ChannelConfigService_Unsubscribe_FullMethodName           = "/channelconfig.v1.ChannelConfigService/Unsubscribe"
	ChannelConfigService_UnsubscribeAll_FullMethodName        = "/channelconfig.v1.ChannelConfigService/UnsubscribeAll"
	ChannelConfigService_ListSubscriptions_FullMethodName     = "/channelconfig.v1.ChannelConfigService/ListSubscriptions"
	ChannelConfigService_ListChannelsByFeature_FullMethodName = "/channelconfig.v1.ChannelConfigService/ListChannelsByFeature"
)

// ChannelConfigServiceClient is the client API for ChannelConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelConfigServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	UnsubscribeAll(ctx context.Context, in *UnsubscribeAllRequest, opts ...grpc.CallOption) (*UnsubscribeAllResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	ListChannelsByFeature(ctx context.Context, in *ListChannelsByFeatureRequest, opts ...grpc.CallOption) (*ListChannelsByFeatureResponse, error)
}

type channelConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelConfigServiceClient(cc grpc.ClientConnInterface) ChannelConfigServiceClient {
	return &channelConfigServiceClient{cc}
}

func (c *channelConfigServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) UnsubscribeAll(ctx context.Context, in *UnsubscribeAllRequest, opts ...grpc.CallOption) (*UnsubscribeAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeAllResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_UnsubscribeAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_ListSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConfigServiceClient) ListChannelsByFeature(ctx context.Context, in *ListChannelsByFeatureRequest, opts ...grpc.CallOption) (*ListChannelsByFeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChannelsByFeatureResponse)
	err := c.cc.Invoke(ctx, ChannelConfigService_ListChannelsByFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelConfigServiceServer is the server API for ChannelConfigService service.
// All implementations must embed UnimplementedChannelConfigServiceServer
// for forward compatibility.
type ChannelConfigServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	UnsubscribeAll(context.Context, *UnsubscribeAllRequest) (*UnsubscribeAllResponse, error)
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	ListChannelsByFeature(context.Context, *ListChannelsByFeatureRequest) (*ListChannelsByFeatureResponse, error)
	mustEmbedUnimplementedChannelConfigServiceServer()
}

// UnimplementedChannelConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChannelConfigServiceServer struct{}

func (UnimplementedChannelConfigServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedChannelConfigServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedChannelConfigServiceServer) UnsubscribeAll(context.Context, *UnsubscribeAllRequest) (*UnsubscribeAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeAll not implemented")
}
func (UnimplementedChannelConfigServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedChannelConfigServiceServer) ListChannelsByFeature(context.Context, *ListChannelsByFeatureRequest) (*ListChannelsByFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannelsByFeature not implemented")
}
func (UnimplementedChannelConfigServiceServer) mustEmbedUnimplementedChannelConfigServiceServer() {}
func (UnimplementedChannelConfigServiceServer) testEmbeddedByValue()                              {}

// UnsafeChannelConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelConfigServiceServer will
// result in compilation errors.
type UnsafeChannelConfigServiceServer interface {
	mustEmbedUnimplementedChannelConfigServiceServer()
}

func RegisterChannelConfigServiceServer(s grpc.ServiceRegistrar, srv ChannelConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedChannelConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChannelConfigService_ServiceDesc, srv)
}

func _ChannelConfigService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_UnsubscribeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).UnsubscribeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_UnsubscribeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).UnsubscribeAll(ctx, req.(*UnsubscribeAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_ListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConfigService_ListChannelsByFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelsByFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).ListChannelsByFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelConfigService_ListChannelsByFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).ListChannelsByFeature(ctx, req.(*ListChannelsByFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelConfigService_ServiceDesc is the grpc.ServiceDesc for ChannelConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channelconfig.v1.ChannelConfigService",
	HandlerType: (*ChannelConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _ChannelConfigService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _ChannelConfigService_Unsubscribe_Handler,
		},
		{
			MethodName: "UnsubscribeAll",
			Handler:    _ChannelConfigService_UnsubscribeAll_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _ChannelConfigService_ListSubscriptions_Handler,
		},
		{
			MethodName: "ListChannelsByFeature",
			Handler:    _ChannelConfigService_ListChannelsByFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channelconfig/v1/service.proto",
}
