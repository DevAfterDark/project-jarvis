// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: jarvis/v1/service.proto

package jarvis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JarvisService_ListInvitedChannels_FullMethodName = "/jarvis.v1.JarvisService/ListInvitedChannels"
	JarvisService_SendSlackMessage_FullMethodName    = "/jarvis.v1.JarvisService/SendSlackMessage"
	JarvisService_GetUserProfile_FullMethodName      = "/jarvis.v1.JarvisService/GetUserProfile"
)

// JarvisServiceClient is the client API for JarvisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JarvisServiceClient interface {
	ListInvitedChannels(ctx context.Context, in *ListInvitedChannelsRequest, opts ...grpc.CallOption) (*ListInvitedChannelsResponse, error)
	SendSlackMessage(ctx context.Context, in *SendSlackMessageRequest, opts ...grpc.CallOption) (*SendSlackMessageResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
}

type jarvisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJarvisServiceClient(cc grpc.ClientConnInterface) JarvisServiceClient {
	return &jarvisServiceClient{cc}
}

func (c *jarvisServiceClient) ListInvitedChannels(ctx context.Context, in *ListInvitedChannelsRequest, opts ...grpc.CallOption) (*ListInvitedChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvitedChannelsResponse)
	err := c.cc.Invoke(ctx, JarvisService_ListInvitedChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisServiceClient) SendSlackMessage(ctx context.Context, in *SendSlackMessageRequest, opts ...grpc.CallOption) (*SendSlackMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSlackMessageResponse)
	err := c.cc.Invoke(ctx, JarvisService_SendSlackMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, JarvisService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JarvisServiceServer is the server API for JarvisService service.
// All implementations must embed UnimplementedJarvisServiceServer
// for forward compatibility.
type JarvisServiceServer interface {
	ListInvitedChannels(context.Context, *ListInvitedChannelsRequest) (*ListInvitedChannelsResponse, error)
	SendSlackMessage(context.Context, *SendSlackMessageRequest) (*SendSlackMessageResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	mustEmbedUnimplementedJarvisServiceServer()
}

// UnimplementedJarvisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJarvisServiceServer struct{}

func (UnimplementedJarvisServiceServer) ListInvitedChannels(context.Context, *ListInvitedChannelsRequest) (*ListInvitedChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitedChannels not implemented")
}
func (UnimplementedJarvisServiceServer) SendSlackMessage(context.Context, *SendSlackMessageRequest) (*SendSlackMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSlackMessage not implemented")
}
func (UnimplementedJarvisServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedJarvisServiceServer) mustEmbedUnimplementedJarvisServiceServer() {}
func (UnimplementedJarvisServiceServer) testEmbeddedByValue()                       {}

// UnsafeJarvisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JarvisServiceServer will
// result in compilation errors.
type UnsafeJarvisServiceServer interface {
	mustEmbedUnimplementedJarvisServiceServer()
}

func RegisterJarvisServiceServer(s grpc.ServiceRegistrar, srv JarvisServiceServer) {
	// If the following call pancis, it indicates UnimplementedJarvisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JarvisService_ServiceDesc, srv)
}

func _JarvisService_ListInvitedChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitedChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServiceServer).ListInvitedChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JarvisService_ListInvitedChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServiceServer).ListInvitedChannels(ctx, req.(*ListInvitedChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisService_SendSlackMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSlackMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServiceServer).SendSlackMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JarvisService_SendSlackMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServiceServer).SendSlackMessage(ctx, req.(*SendSlackMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JarvisService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JarvisService_ServiceDesc is the grpc.ServiceDesc for JarvisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JarvisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jarvis.v1.JarvisService",
	HandlerType: (*JarvisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInvitedChannels",
			Handler:    _JarvisService_ListInvitedChannels_Handler,
		},
		{
			MethodName: "SendSlackMessage",
			Handler:    _JarvisService_SendSlackMessage_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _JarvisService_GetUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jarvis/v1/service.proto",
}
