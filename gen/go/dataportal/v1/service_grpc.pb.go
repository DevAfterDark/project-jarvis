// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: dataportal/v1/service.proto

package dataportal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataPortalService_ListHolidays_FullMethodName              = "/dataportal.v1.DataPortalService/ListHolidays"
	DataPortalService_GetUltraShortTermForecast_FullMethodName = "/dataportal.v1.DataPortalService/GetUltraShortTermForecast"
)

// DataPortalServiceClient is the client API for DataPortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataPortalServiceClient interface {
	ListHolidays(ctx context.Context, in *ListHolidaysRequest, opts ...grpc.CallOption) (*ListHolidaysResponse, error)
	GetUltraShortTermForecast(ctx context.Context, in *GetUltraShortTermForecastRequest, opts ...grpc.CallOption) (*GetUltraShortTermForecastResponse, error)
}

type dataPortalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataPortalServiceClient(cc grpc.ClientConnInterface) DataPortalServiceClient {
	return &dataPortalServiceClient{cc}
}

func (c *dataPortalServiceClient) ListHolidays(ctx context.Context, in *ListHolidaysRequest, opts ...grpc.CallOption) (*ListHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHolidaysResponse)
	err := c.cc.Invoke(ctx, DataPortalService_ListHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPortalServiceClient) GetUltraShortTermForecast(ctx context.Context, in *GetUltraShortTermForecastRequest, opts ...grpc.CallOption) (*GetUltraShortTermForecastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUltraShortTermForecastResponse)
	err := c.cc.Invoke(ctx, DataPortalService_GetUltraShortTermForecast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataPortalServiceServer is the server API for DataPortalService service.
// All implementations must embed UnimplementedDataPortalServiceServer
// for forward compatibility.
type DataPortalServiceServer interface {
	ListHolidays(context.Context, *ListHolidaysRequest) (*ListHolidaysResponse, error)
	GetUltraShortTermForecast(context.Context, *GetUltraShortTermForecastRequest) (*GetUltraShortTermForecastResponse, error)
	mustEmbedUnimplementedDataPortalServiceServer()
}

// UnimplementedDataPortalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataPortalServiceServer struct{}

func (UnimplementedDataPortalServiceServer) ListHolidays(context.Context, *ListHolidaysRequest) (*ListHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHolidays not implemented")
}
func (UnimplementedDataPortalServiceServer) GetUltraShortTermForecast(context.Context, *GetUltraShortTermForecastRequest) (*GetUltraShortTermForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUltraShortTermForecast not implemented")
}
func (UnimplementedDataPortalServiceServer) mustEmbedUnimplementedDataPortalServiceServer() {}
func (UnimplementedDataPortalServiceServer) testEmbeddedByValue()                           {}

// UnsafeDataPortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataPortalServiceServer will
// result in compilation errors.
type UnsafeDataPortalServiceServer interface {
	mustEmbedUnimplementedDataPortalServiceServer()
}

func RegisterDataPortalServiceServer(s grpc.ServiceRegistrar, srv DataPortalServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataPortalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataPortalService_ServiceDesc, srv)
}

func _DataPortalService_ListHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPortalServiceServer).ListHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPortalService_ListHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPortalServiceServer).ListHolidays(ctx, req.(*ListHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPortalService_GetUltraShortTermForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUltraShortTermForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPortalServiceServer).GetUltraShortTermForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPortalService_GetUltraShortTermForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPortalServiceServer).GetUltraShortTermForecast(ctx, req.(*GetUltraShortTermForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataPortalService_ServiceDesc is the grpc.ServiceDesc for DataPortalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataPortalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataportal.v1.DataPortalService",
	HandlerType: (*DataPortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHolidays",
			Handler:    _DataPortalService_ListHolidays_Handler,
		},
		{
			MethodName: "GetUltraShortTermForecast",
			Handler:    _DataPortalService_GetUltraShortTermForecast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataportal/v1/service.proto",
}
